#!/bin/sh

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARTIFACTS_PATH=$DIR/results
KUBECONFIG=

USAGE=$(cat <<USAGE
Usage:

  * providing a "kubeconfig"

    -k|--kubeconfig <FILE>   kubeconfig file

Other:

    --artifacts <DIR>        directory where junit XML files are stored
    --log <FILE>             log file

USAGE
)

# logging and utils

log()        { (>&2 echo ">>> [e2e-tests] $@") ; }
warn()       { log "WARNING: $@" ; }
error()      { log "ERROR: $@" ; exit 1 ; }
abort()      { log "FATAL: $@" ; exit 1 ; }
check_file() { [ -f "$1" ] || abort "File $1 doesn't exist!" ; }

# options

while [[ $# > 0 ]] ; do
  case $1 in
    -k|--kubeconfig)
      KUBECONFIG="$(realpath $2)"
      check_file $KUBECONFIG
      shift
      ;;
    --artifacts)
      ARTIFACTS_PATH="$(realpath $2)"
      shift
      ;;
    -h|--help)
      echo "$USAGE"
      exit 0
      ;;
  esac
  shift
done

run_tests() {
    KUBECONFIG=$KUBECONFIG kubectl apply -f https://raw.githubusercontent.com/cncf/k8s-conformance/6179d790e6bfc799afef5058ce50a2f314983fa2/sonobuoy-conformance.yaml
    while ! KUBECONFIG=$KUBECONFIG kubectl logs -n sonobuoy sonobuoy | grep "sonobuoy is now blocking"; do
        sleep 1
    done

    # Create the artifacts path
    mkdir -p $ARTIFACTS_PATH

    # Copy results from the container
    KUBECONFIG=$KUBECONFIG kubectl cp sonobuoy/sonobuoy:tmp/sonobuoy $ARTIFACTS_PATH
    find $ARTIFACTS_PATH -name '*.tar.gz' | xargs -I{} tar -xf {} -C $ARTIFACTS_PATH
    find $ARTIFACTS_PATH -name '*.tar.gz' | xargs rm
    find $ARTIFACTS_PATH -name e2e.log | xargs tail -n4 | grep SUCCESS || abort "conformance tests failed"
}

# checks

if [ -z "$KUBECONFIG" ]; then
  abort "Option -k|--kubeconfig is required"
fi

# main

run_tests

log "Done."
