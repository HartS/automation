#!/bin/sh
#
# READ THIS BEFORE ADDING ANYTHING HERE.
#
# This script should remain as simple as possible, with
# options only for the most commonly used options of the
# tools it orchestrates. If it's not something most
# developers would use at least once a week, then it doesn't
# belong here.
#
# This script should be as dumb as possible, it should
# contain the most commonly used options for each of the
# other tools, and no more. If you need to customize the
# options for a tool, use that tool directly instead!

set -euo pipefail

DIR="$( cd "$( dirname "$0" )" && pwd )"

# options
RUN_SETUP=
RUN_BUILD=
RUN_BOOTSTRAP=
RUN_TESTINFRA=
RUN_DESTROY=

MASTERS=${CAASP_NUM_MASTERS:-1}
WORKERS=${CAASP_NUM_WORKERS:-2}
IMAGE=${CAASP_IMAGE:-channel://devel}
PROXY=${CAASP_HTTP_PROXY:-}
PARALLELISM=${CAASP_PARALLELISM:-1}

# base distribution used for setting up dependencies, and the packages to install
DIST_BASE="opensuse.org/repositories/Virtualization:/containers"
DIST_PACKAGES="jq \
               python-tox \
               python-devel \
               python-requests \
               libsodium-devel \
               python-openstackclient \
               python-novaclient \
               python-heatclient \
               terraform \
               terraform-provider-libvirt \
               qemu-kvm \
               docker \
               libvirt-daemon-qemu \
               ca-certificates-suse \
               libffi-devel-gcc5 \
               libopenssl-devel"

USAGE=$(cat <<USAGE
Usage:

  * Setup your workstation

    --setup                  Install Dev Env Dependencies

  * Building a cluster

    -b|--build               Run the CaaSP KVM Build Step
    -m|--masters <INT>       Number of masters to build (Default: CAASP_NUM_MASTERS)
    -w|--workers <INT>       Number of workers to build (Default: CAASP_NUM_WORKERS)
    -d|--destroy             Run the CaaSP KVM Destroy Step
    -i|--image               Image to use (Default: CAASP_IMAGE)

  * Bootstraping a cluster

    Velum Username: test@test.com
    Velum Password: password

    -B|--bootstrap           Bootstrap CaaSP cluster

  * Testing a cluster

    -T|--testinfra           Run testinfra tests

  * Common options

    -p|--parallelism         Set terraform parallelism (Default: CAASP_PARALLELISM)
    -P|--proxy               Set HTTP Proxy (Default: CAASP_HTTP_PROXY)

  * Examples:

  Build, Bootstrap and Test a cluster

  $0 --build -m 1 -w 2 --bootstrap --testinfra

  Bootstrap and Test a pre-made cluster

  $0 --bootstrap --testinfra

USAGE
)

# Utility methods
log()        { (>&2 echo ">>> [caasp-devenv] $@") ; }
warn()       { log "WARNING: $@" ; }
error()      { log "ERROR: $@" ; exit 1 ; }
check_file() { [ -f "$1" ] || error "File $1 doesn't exist!" ; }
usage()      { echo "$USAGE" ; exit 0 ; }

# parse options
while [[ $# > 0 ]] ; do
  case $1 in
    --setup)
      ACTION=1
      RUN_SETUP=1
      ;;
    -b|--build)
      ACTION=1
      RUN_BUILD=1
      ;;
    -m|--masters)
      MASTERS="$2"
      shift
      ;;
    -w|--workers)
      WORKERS="$2"
      shift
      ;;
    -d|--destroy)
      ACTION=1
      RUN_DESTROY=1
      ;;
    -i|--image)
      IMAGE="$2"
      shift
      ;;
    -B|--bootstrap)
      ACTION=1
      RUN_BOOTSTRAP=1
      ;;
    -T|--testinfra)
      ACTION=1
      RUN_TESTINFRA=1
      ;;
    -p|--parallelism)
      PARALLELISM="$2"
      shift
      ;;
    -P|--proxy)
      PROXY="$2"
      shift
      ;;
    -h|--help)
      usage
      ;;
  esac
  shift
done

##############################################################

CAASP_KVM_ARGS="-m $MASTERS -w $WORKERS --image $IMAGE"
[ -n "$PARALLELISM" ] && CAASP_KVM_ARGS="$CAASP_KVM_ARGS --parallelism=$PARALLELISM"
[ -n "$PROXY"       ] && CAASP_KVM_ARGS="$CAASP_KVM_ARGS --proxy $PROXY"

export ENVIRONMENT="$DIR/caasp-kvm/environment.json"

# Core methods
setup() {
  log "Installing CaaSP Development Environment Requiemnts"
  local dist=$(lsb-release -sd | tr -d '"' | tr " " "_")

  if ! zypper lr -dU | grep --quiet "suse.de/ibs/SUSE:/CA" ; then
    log "Adding SUSE:CA Zypper repo"
    sudo zypper ar "http://download.suse.de/ibs/SUSE:/CA/${dist}/SUSE:CA.repo"
    sudo zypper --gpg-auto-import-keys ref SUSE_CA
  fi

  if ! zypper lr -dU | grep --quiet "$DIST_BASE" ; then
    log "Adding Virtualization:containers Zypper repo"
    sudo zypper ar "http://download.$DIST_BASE/${dist}/Virtualization:containers.repo"
    sudo zypper --gpg-auto-import-keys ref Virtualization_containers
  fi

  # || : is necessary, as Zypper exits non-zero for "no changes".
  sudo zypper in --no-confirm $DIST_PACKAGES || :

  # Enable and start services, if disabled
  sudo systemctl enable --now docker
  sudo systemctl enable --now libvirtd

  # Ensure the current user has access to docker and libvirt
  sudo usermod -aG docker,libvirt $USER

  (cd "$DIR/velum-bootstrap" && ./velum-interactions --setup)

  warn "You should now logout and back in again, in order for group membership changes to be reflected"
}

build() {
  log "Starting CaaSP KVM Environment"
  (cd "$DIR/caasp-kvm" && ./caasp-kvm --build $CAASP_KVM_ARGS )
}

bootstrap() {
  log "Bootstrap CaaSP Environment"
  [ -f "$ENVIRONMENT" ] || error "no environment file found at $ENVIRONMENT"
  (cd "$DIR/velum-bootstrap" && ./velum-interactions --configure --bootstrap )
}

testinfra() {
  log "Testing CaaSP Environment using testinfra"
  [ -f "$ENVIRONMENT" ] || error "no environment file found at $ENVIRONMENT"
  (cd "$DIR/testinfra" && env ENVIRONMENT_JSON="$ENVIRONMENT" tox)
}

destroy() {
  log "Destroy CaaSP KVM Environment"
  (cd "$DIR/caasp-kvm" && ./caasp-kvm --destroy $CAASP_KVM_ARGS)
}

[ -n "$ACTION"        ] || usage
[ -n "$RUN_SETUP"     ] && setup
[ -n "$RUN_BUILD"     ] && build
[ -n "$RUN_BOOTSTRAP" ] && bootstrap
[ -n "$RUN_TESTINFRA" ] && testinfra
[ -n "$RUN_DESTROY"   ] && destroy
